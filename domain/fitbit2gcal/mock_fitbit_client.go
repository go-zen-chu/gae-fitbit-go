// Code generated by MockGen. DO NOT EDIT.
// Source: fitbit_client.go

// Package fitbit2gcal is a generated GoMock package.
package fitbit2gcal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFitbitClient is a mock of FitbitClient interface
type MockFitbitClient struct {
	ctrl     *gomock.Controller
	recorder *MockFitbitClientMockRecorder
}

// MockFitbitClientMockRecorder is the mock recorder for MockFitbitClient
type MockFitbitClientMockRecorder struct {
	mock *MockFitbitClient
}

// NewMockFitbitClient creates a new mock instance
func NewMockFitbitClient(ctrl *gomock.Controller) *MockFitbitClient {
	mock := &MockFitbitClient{ctrl: ctrl}
	mock.recorder = &MockFitbitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFitbitClient) EXPECT() *MockFitbitClientMockRecorder {
	return m.recorder
}

// GetSleepData mocks base method
func (m *MockFitbitClient) GetSleepData(dateStr string) (*Sleep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSleepData", dateStr)
	ret0, _ := ret[0].(*Sleep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSleepData indicates an expected call of GetSleepData
func (mr *MockFitbitClientMockRecorder) GetSleepData(dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSleepData", reflect.TypeOf((*MockFitbitClient)(nil).GetSleepData), dateStr)
}

// GetActivityData mocks base method
func (m *MockFitbitClient) GetActivityData(dateStr string) (*Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivityData", dateStr)
	ret0, _ := ret[0].(*Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivityData indicates an expected call of GetActivityData
func (mr *MockFitbitClientMockRecorder) GetActivityData(dateStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivityData", reflect.TypeOf((*MockFitbitClient)(nil).GetActivityData), dateStr)
}

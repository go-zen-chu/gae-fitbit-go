// Code generated by MockGen. DO NOT EDIT.
// Source: gcal_client.go

// Package fitbit2gcal is a generated GoMock package.
package fitbit2gcal

import (
	gomock "github.com/golang/mock/gomock"
	v3 "google.golang.org/api/calendar/v3"
	reflect "reflect"
)

// MockGCalClient is a mock of GCalClient interface
type MockGCalClient struct {
	ctrl     *gomock.Controller
	recorder *MockGCalClientMockRecorder
}

// MockGCalClientMockRecorder is the mock recorder for MockGCalClient
type MockGCalClientMockRecorder struct {
	mock *MockGCalClient
}

// NewMockGCalClient creates a new mock instance
func NewMockGCalClient(ctrl *gomock.Controller) *MockGCalClient {
	mock := &MockGCalClient{ctrl: ctrl}
	mock.recorder = &MockGCalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGCalClient) EXPECT() *MockGCalClientMockRecorder {
	return m.recorder
}

// InsertEvent mocks base method
func (m *MockGCalClient) InsertEvent(event *v3.Event, dataType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", event, dataType)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent
func (mr *MockGCalClientMockRecorder) InsertEvent(event, dataType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockGCalClient)(nil).InsertEvent), event, dataType)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package fitbit2gcal is a generated GoMock package.
package fitbit2gcal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Fitbit2GCal mocks base method
func (m *MockService) Fitbit2GCal(fromDate, toDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fitbit2GCal", fromDate, toDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fitbit2GCal indicates an expected call of Fitbit2GCal
func (mr *MockServiceMockRecorder) Fitbit2GCal(fromDate, toDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fitbit2GCal", reflect.TypeOf((*MockService)(nil).Fitbit2GCal), fromDate, toDate)
}

// Fitbit2GCalToday mocks base method
func (m *MockService) Fitbit2GCalToday() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fitbit2GCalToday")
	ret0, _ := ret[0].(error)
	return ret0
}

// Fitbit2GCalToday indicates an expected call of Fitbit2GCalToday
func (mr *MockServiceMockRecorder) Fitbit2GCalToday() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fitbit2GCalToday", reflect.TypeOf((*MockService)(nil).Fitbit2GCalToday))
}

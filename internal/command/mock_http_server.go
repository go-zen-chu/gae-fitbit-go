// Code generated by MockGen. DO NOT EDIT.
// Source: http_server.go

// Package command is a generated GoMock package.
package command

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHttpServer is a mock of HttpServer interface
type MockHttpServer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpServerMockRecorder
}

// MockHttpServerMockRecorder is the mock recorder for MockHttpServer
type MockHttpServerMockRecorder struct {
	mock *MockHttpServer
}

// NewMockHttpServer creates a new mock instance
func NewMockHttpServer(ctrl *gomock.Controller) *MockHttpServer {
	mock := &MockHttpServer{ctrl: ctrl}
	mock.recorder = &MockHttpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpServer) EXPECT() *MockHttpServerMockRecorder {
	return m.recorder
}

// HandleFunc mocks base method
func (m *MockHttpServer) HandleFunc(pattern string, handlerFunc http.HandlerFunc) {
	m.ctrl.Call(m, "HandleFunc", pattern, handlerFunc)
}

// HandleFunc indicates an expected call of HandleFunc
func (mr *MockHttpServerMockRecorder) HandleFunc(pattern, handlerFunc interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockHttpServer)(nil).HandleFunc), pattern, handlerFunc)
}

// Run mocks base method
func (m *MockHttpServer) Run(port string) error {
	ret := m.ctrl.Call(m, "Run", port)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockHttpServerMockRecorder) Run(port interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHttpServer)(nil).Run), port)
}
